package com.carrot_market.repository;

import com.carrot_market.constant.ItemSellStatus;
import com.carrot_market.entity.Item;
import com.carrot_market.entity.QItem;
import com.querydsl.core.BooleanBuilder;
import com.querydsl.jpa.impl.JPAQuery;
import com.querydsl.jpa.impl.JPAQueryFactory;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.test.context.TestPropertySource;
import org.thymeleaf.util.StringUtils;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import java.time.LocalDateTime;
import java.util.List;

@SpringBootTest
@TestPropertySource(locations = "classpath:application-test.properties")
class ItemRepositoryTest {
    @Autowired
    ItemRepository itemRepository;
    @PersistenceContext
    EntityManager em;

    @Test
    @DisplayName("Item save Test")
    public void createItemTest(){
        Item item = new Item();
        item.setItemNm("test item");
        item.setItemDetail("test item detail");
        item.setPrice(15000);
        item.setStockNumber(100);
        item.setItemSellStatus(ItemSellStatus.SELL);
        item.setUpdateTime(LocalDateTime.now());
        item.setRegTime(LocalDateTime.now());
        Item savedItem = itemRepository.save(item);
        System.out.println(savedItem.toString());
    }

    public void createItemList(){
        for(int i = 1; i <= 10; i++){
            Item item = new Item();
            item.setItemNm("test item " + i);
            item.setItemDetail("test item detail " + i);
            item.setPrice(10000 + i * 1000);
            item.setItemSellStatus(ItemSellStatus.SELL);
            item.setRegTime(LocalDateTime.now());
            item.setUpdateTime(LocalDateTime.now());
            item.setStockNumber(100);
            Item saveItem = itemRepository.save(item);
        }
    }
//    @Test
//    @DisplayName("Item Name search Test")
//    public void findByItemNmTest(){
//        this.createItemList();
//        List<Item> itemList = itemRepository.findByItemNm("test item 1");
//        for(Item item : itemList){
//            System.out.println(item.toString());
//        }
//    }

    @Test
    @DisplayName("Item Name and Detail search test")
    public void findByItemNmOrItemDetailTest(){
        this.createItemList();
        List<Item> itemList = itemRepository.findByItemNmOrItemDetail("test item 1", "test item detail 1");
        for(Item item : itemList){
            System.out.println(item.toString());
        }
    }

    @Test
    @DisplayName("less than test")
    public void findByPriceLessThanTest(){
        this.createItemList();
        List<Item> itemList = itemRepository.findByPriceLessThan(14000);
        for(Item item : itemList){
            System.out.println(item.toString());
        }
    }

    @Test
    @DisplayName("less than + order test")
    public void findByPriceLessThanOrderByPriceDescTest(){
        this.createItemList();
        List<Item> itemList = itemRepository.findByPriceLessThanOrderByPriceDesc(16000);
        for(Item item : itemList){
            System.out.println(item.toString());
        }
    }

    @Test
    @DisplayName("find by itemNm with @Query")
    public void findByItemNmTest(){
        this.createItemList();
        List<Item> itemList = itemRepository.findByItemNm("test item detail ");
        for(Item item: itemList){
            System.out.println(item.toString());
        }
    }

    @Test
    @DisplayName("find by itemNm with native Query")
    public void findByItemNmByNativeTest(){
        this.createItemList();
        List<Item> itemList = itemRepository.findByItemNmByNative("test item detail ");
        for(Item item: itemList){
            System.out.println(item.toString());
        }
    }

    @Test
    @DisplayName("Querydsl test1")
    public void queryDslTest(){
        this.createItemList();
        // em : Entity Manager with @PersistenceContext
        // With JPAQueryFactory, make query dynamically
        JPAQueryFactory queryFactory = new JPAQueryFactory(em);

        // to use querydsl, use QItem entity which is automatically generated by plugin
        QItem qItem = QItem.item;
        // query that is similar to query
        JPAQuery<Item> query = queryFactory.selectFrom(qItem)
                .where(qItem.itemSellStatus.eq(ItemSellStatus.SELL))
                .where(qItem.itemDetail.like("%" + "test item detail " + "%"))
                .orderBy(qItem.price.desc());
        // where is condition to query

        // fetch > get query result
        List<Item> itemList = query.fetch();
        for(Item item: itemList){
            System.out.println(item.toString());
        }
    }

    public void createItemList2(){
        for(int i = 1; i <= 5; i++){
            Item item = new Item();
            item.setItemNm("test item " + i);
            item.setItemDetail("test item detail " + i);
            item.setPrice(10000 + i * 1000);
            item.setItemSellStatus(ItemSellStatus.SELL);
            item.setRegTime(LocalDateTime.now());
            item.setUpdateTime(LocalDateTime.now());
            item.setStockNumber(100);
            Item saveItem = itemRepository.save(item);
        }

        for(int i = 6; i <= 10; i++){
            Item item = new Item();
            item.setItemNm("test item " + i);
            item.setItemDetail("test item detail " + i);
            item.setPrice(10000 + i * 1000);
            item.setItemSellStatus(ItemSellStatus.SOLD_OUT);
            item.setRegTime(LocalDateTime.now());
            item.setUpdateTime(LocalDateTime.now());
            item.setStockNumber(0);
            Item saveItem = itemRepository.save(item);
        }
    }

    @Test
    @DisplayName("item Querydsl test 2")
    public void queryDslTest2(){
        this.createItemList2();
        // BooleanBuilder is
        BooleanBuilder booleanBuilder = new BooleanBuilder();

        QItem qItem = QItem.item;

        String itemDetail = "test item detail ";
        int price = 13000;
        String itemSellStatus = "SELL";

        booleanBuilder.and(qItem.itemDetail.like("%" + itemDetail + "%"));
        booleanBuilder.and(qItem.price.gt(price));

        if(StringUtils.equals(itemSellStatus, ItemSellStatus.SELL)){
            booleanBuilder.and(qItem.itemSellStatus.eq(ItemSellStatus.SELL));
        }

        Pageable pageable = PageRequest.of(0, 5);
        Page<Item>  itemPagingResult = itemRepository.findAll(booleanBuilder, pageable);
        System.out.println("total elements : " + itemPagingResult.getTotalElements());

        List<Item> itemList = itemPagingResult.getContent();
        for(Item resultItem: itemList){
            System.out.println(resultItem.toString());
        }
    }
}